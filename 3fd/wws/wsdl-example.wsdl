<?xml version="1.0" encoding="utf-8"?>

<!-- For more information see http://msdn.microsoft.com/en-us/library/ms996486.aspx -->
<wsdl:definitions
  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
  xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
  xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:tns="http://calculator.example.org/"
  targetNamespace="http://calculator.example.org/">

  <!-- These policy settings tell wsutil.exe to generate code for a web service
  with SSL security on transport. Remove this node if you do now wish to use SSL. -->
  <wsp:Policy wsu:Id="sslpol">
    <wsp:ExactlyOne>
      <sp:TransportBinding xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
        <wsp:Policy>
          <sp:TransportToken>
            <wsp:Policy>
              <sp:HttpsToken RequireClientCertificate="false" />
            </wsp:Policy>
          </sp:TransportToken>
          <sp:AlgorithmSuite>
            <wsp:Policy>
              <sp:Basic256 />
            </wsp:Policy>
          </sp:AlgorithmSuite>
          <sp:Layout>
            <wsp:Policy>
              <sp:Strict />
            </wsp:Policy>
          </sp:Layout>
          <sp:IncludeTimestamp />
        </wsp:Policy>
      </sp:TransportBinding>
    </wsp:ExactlyOne>
  </wsp:Policy>

  <!-- The type definitions you place here are referenced from higher-level message definitions in order to define the structural details of the message -->
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified" targetNamespace="http://calculator.example.org/">
      
      <!-- The complex types below are reusable structural definitions for messages -->
      <xsd:complexType name="BinaryOpRequest">
        <xsd:sequence>
          <xsd:element name="first" type="xsd:double" />
          <xsd:element name="second" type="xsd:double" />
        </xsd:sequence>
      </xsd:complexType>
      
      <xsd:complexType name="OperationResponse">
        <xsd:sequence>
          <xsd:element name="result" type="xsd:double" />
        </xsd:sequence>
      </xsd:complexType>
      
      <!-- And now you define the types for the operations referencing the previously defined complex types -->
      <xsd:element name="AdditionRequest" type="tns:BinaryOpRequest" />
      <xsd:element name="AdditionResponse" type="tns:OperationResponse" />
    </xsd:schema>
  </wsdl:types>

  <!-- The WSDL message elements define abstract messages that can serve as the input or output of operations. 
  You don't know how they'll appear in the concrete message format until you've applied a binding to them. For 
  example, if you use one abstract message with two different bindings, it's possible that the two concrete 
  messages will look different. Only with 'literal' bindings are the abstract definitions guaranteed to 
  accurately describe the concrete message format. -->
  <wsdl:message name="AdditionRequestMessage">
    <wsdl:part name="parameters" element="tns:AdditionRequest" />
  </wsdl:message>
  <wsdl:message name="AdditionResponseMessage">
    <wsdl:part name="parameters" element="tns:AdditionResponse" />
  </wsdl:message>

  <!-- The WSDL portType element defines a group of operations, also known as an interface in most environments. 
  Unfortunately, the term "portType" is quite confusing so you're better off using the term "interface" in 
  conversation. WSDL 1.2 has already removed "portType" and replaced it with "interface" in the current draft 
  of the language. A portType element contains zero or more operation elements.
  
  Each operation element contains a combination of input and output elements, and when you have an output element you 
  can also have a fault element. The order of these elements defines the message exchange pattern (MEP) supported by 
  the given operation. For example, an input element followed by an output element defines a request-response operation, 
  while an output element followed by an input element defines a solicit-response operation. An operation that only 
  contains an input element defines a one-way operation, while an operation that only contains an output element defines 
  a notification operation. -->
  <wsdl:portType name="CalculatorPort">
    <wsdl:operation name="Add">
      <wsdl:input message="tns:AdditionRequestMessage" />
      <wsdl:output message="tns:AdditionResponseMessage" />
    </wsdl:operation>
  </wsdl:portType>

  <!-- The WSDL binding element describes the concrete details of using a particular portType with a given protocol -->
  <wsdl:binding name="CalculatorBinding" type="tns:CalculatorPort">
    
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsp:PolicyReference URI="#sslpol" />
    
    <wsdl:operation name="Add">
      <soap:operation soapAction="http://calculator.example.org/Add" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>

  <!-- The WSDL service element defines a collection of ports, or endpoints, that exposes a particular binding -->
  <wsdl:service name="CalculatorService">
    <wsdl:port name="CalculatorEndpoint" binding="tns:CalculatorBinding">
      <soap:address location="https://hostname:444/calculator"/>
    </wsdl:port>
  </wsdl:service>

</wsdl:definitions>